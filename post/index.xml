<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fish blog ø</title>
    <link>http://blog.innoweb.cn/post/</link>
    <description>Recent content in Posts on Fish blog ø</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2008 - 2014, Steve Francia; all rights reserved.</copyright>
    <lastBuildDate>Mon, 15 Jun 2020 01:31:41 +0800</lastBuildDate>
    
	<atom:link href="http://blog.innoweb.cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>大数相加和大数相乘</title>
      <link>http://blog.innoweb.cn/post/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0%E5%92%8C%E5%A4%A7%E6%95%B0%E7%9B%B8%E4%B9%98/</link>
      <pubDate>Mon, 15 Jun 2020 01:31:41 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0%E5%92%8C%E5%A4%A7%E6%95%B0%E7%9B%B8%E4%B9%98/</guid>
      <description>大数相加和大数相乘 所有的语言数字类型都有安全的计算范围，超过范围之后不同语言的处理不同，有可能会报错，也有可能拿不到精确的结果，对javascript来说它的处理是不精确的结果： 1 2 console.log(123456789 * 987654321) // 121932631112635260 错误结果 对于golang来说溢出的计算会抛出错误： 1 2 3 4 5 6 7 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(1234567890 * 9876543210) // constant</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>http://blog.innoweb.cn/post/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Thu, 04 Jun 2020 17:13:24 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算基础 位操作 是程序设计中对位模式或二进制数的一元和二元操作。在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。在现代架构中，情况并非如此：位运算的运算速度通常与加法运算相同（仍然快于乘法运算）。基本的位操作符有与、或、异或、取反、左移、右移这6种，</description>
    </item>
    
    <item>
      <title>俄罗斯农民乘法</title>
      <link>http://blog.innoweb.cn/post/%E4%BF%84%E7%BD%97%E6%96%AF%E5%86%9C%E6%B0%91%E4%B9%98%E6%B3%95/</link>
      <pubDate>Fri, 15 May 2020 18:12:20 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E4%BF%84%E7%BD%97%E6%96%AF%E5%86%9C%E6%B0%91%E4%B9%98%E6%B3%95/</guid>
      <description>龙鸣乘法 在很久很久以前。。。人们是这样做乘法的。。。这是一种古老的乘法算法，但是在如今的计算机中却还能发现它的身影。它，就是以俄罗斯农民命名的乘法算法！ 我们绝大多数人学的都是这样做大数字乘法的： 1 2 3 4 5 6 7 86 x 57 ------ 602 + 4300 ------ 4902 如果你懂得乘法算式，那么这种“长式相乘”的方法是快速和</description>
    </item>
    
    <item>
      <title>跳表</title>
      <link>http://blog.innoweb.cn/post/%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Wed, 15 Apr 2020 20:14:51 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E8%B7%B3%E8%A1%A8/</guid>
      <description>跳表（skip list） Skip list是一个用于有序元素序列快速搜索的数据结构，由美国计算机科学家William Pugh发明于1989年。它的效率和红黑树以及 AVL 树不相上下，但实现起来比较容易。 作者William Pugh是这样介绍Skip list的: Skip list是一个“概率型”的数据结构</description>
    </item>
    
    <item>
      <title>广度优先遍历与优化</title>
      <link>http://blog.innoweb.cn/post/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E4%B8%8E%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 25 Feb 2020 17:20:39 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E4%B8%8E%E4%BC%98%E5%8C%96/</guid>
      <description>概述 广度优先遍历属于图的一种基本遍历算法，其基本思想是尽最大程度辐射能够覆盖的节点，并对其进行访问。 这里所说的图，不止局限于存储结构上的图，还包括逻辑结构上的图，接下来也会举相对的例子。 以迷宫为例，深度优先搜索更像是一个人在走迷宫，遇到没有走过就标记，遇到走过就退一步重新走；而广</description>
    </item>
    
    <item>
      <title>Leetcode刷题记录</title>
      <link>http://blog.innoweb.cn/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 19 Feb 2020 22:49:56 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>1.两数之和 力扣（LeetCode）链接 题目描述： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 1 2 3 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1]</description>
    </item>
    
    <item>
      <title>Go编程规范</title>
      <link>http://blog.innoweb.cn/post/go%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 11 Feb 2020 19:57:37 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/go%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</guid>
      <description>要使用好你的语言，重要的是要了解它的特性和约定。 了解Go编程中已建立的约定（如命名，格式设置，程序构造等）非常重要，这样您编写的程序将易于其他Go程序员理解。以下我们介绍了惯用的Go代码的技巧和语言规范。 注释 Go提供了C样式/ * * /块注释和C ++样式//行注释。 行注释是常态。 块注</description>
    </item>
    
    <item>
      <title>Go操作kafka</title>
      <link>http://blog.innoweb.cn/post/go%E6%93%8D%E4%BD%9Ckafka/</link>
      <pubDate>Sat, 08 Feb 2020 07:04:04 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/go%E6%93%8D%E4%BD%9Ckafka/</guid>
      <description>消息概念部分引自李文周的个人博客。 什么叫消息队列💩 消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。 消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传</description>
    </item>
    
    <item>
      <title>Go校验层go-validator</title>
      <link>http://blog.innoweb.cn/post/go%E6%A0%A1%E9%AA%8C%E5%B1%82go-validator/</link>
      <pubDate>Fri, 31 Jan 2020 22:00:26 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/go%E6%A0%A1%E9%AA%8C%E5%B1%82go-validator/</guid>
      <description>最近在使用iris框架开发应用的时候，框架本身没有提供优秀的校验层，于是找到了一个第三方库go-validator来搭建校验层。 安装 Go get 获取依赖。 1 go get gopkg.in/validator.v2 Import the package into your own code. 1 2 3 import ( &amp;#34;gopkg.in/validator.v2&amp;#34; ) 使用 定义校验规则 自定义你的校验规则，同时可以使用匿名继承的方式定义结构体。 1 2 3 4 5 6 7 8 9 10 type LoginValidator</description>
    </item>
    
    <item>
      <title>Go处理token</title>
      <link>http://blog.innoweb.cn/post/go%E5%A4%84%E7%90%86token/</link>
      <pubDate>Fri, 31 Jan 2020 21:34:13 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/go%E5%A4%84%E7%90%86token/</guid>
      <description>搭建网站时我们经常使用JWT做用户鉴权，在golang中我们🉑️以通过jwt-go的第三方库来为我们实现。 常见的处理流程： 从request获取tokenstring，可能是通过cookie携带，也可能是从lacalstorage读取并写入请求头。 将tokenstring转化为未解</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://blog.innoweb.cn/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 31 Jan 2020 09:04:57 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>前言 ✍ 动态规划（Dynamic Programming），求解的问题必须有两个性质：最优子结构和子问题重叠，和分治法的思想相同，动态规划的思路也是先将大问题分解成若干个规模相同的子问题，但是动态规划的问题是重叠的，想要理解一个动态规划就要理解一个它的核心，动态规划算法的核心是下面的</description>
    </item>
    
    <item>
      <title>动态规划模型</title>
      <link>http://blog.innoweb.cn/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 31 Jan 2020 08:33:26 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>线性模型 🌾 两个变量之间存在一次方函数关系，就称它们之间存在线性关系。 在线性结构上进行状态转移DP，统称线性DP，注意问题中的未知数只有两个那就是n和f(n)，比如说分金币问题中的coins总数和charge次数。下面拿实际问题来举例子。 注意：已知量数组不属于变量，比如说金币面额。</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://blog.innoweb.cn/post/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 31 Jan 2020 08:18:46 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>简介 贪心算法（英语：greedy algorithm），又称贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。 例子:最小生成树的算法 (Prim MST</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>http://blog.innoweb.cn/post/%E9%80%92%E5%BD%92/</link>
      <pubDate>Fri, 31 Jan 2020 08:12:41 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E9%80%92%E5%BD%92/</guid>
      <description>定义 在数学与计算机科学中，递归(Recursion)是指在函数的定义中使用函数自身的方法。在算法中递归应用之广毋庸置疑回溯，分治，动态规划，贪心算法中都推导的过程中可能用到递归算法。比如实际上，递归，顾名思义，其包含了两个意思：递 和 归，这正是递归思想的精华所在： 递归就是有去（递去</description>
    </item>
    
    <item>
      <title>回溯算法</title>
      <link>http://blog.innoweb.cn/post/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 31 Jan 2020 08:11:15 +0800</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>回溯算法实际上一个类似枚举的搜索尝试过程，是穷举的子集，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。 所谓的回溯，其实就是利用了for循环的执行先后顺序，比如同一层循环中，某一次循环断裂掉了，那么下一次循环一定会执行，也就是所谓的回溯</description>
    </item>
    
    <item>
      <title>二叉排序树</title>
      <link>http://blog.innoweb.cn/post/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.innoweb.cn/post/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</guid>
      <description>二叉排序树 二叉排序树的基础数据结构当然是一棵二叉树，在二叉树的基础上二叉排序树添加了一些特性，让其自身适合于查找的场景。 规则 若二叉排序树的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 若它的右子树不空，则右子树上所有节点的值均大于其根节点的值。 换句话说就是：任何节点的键</description>
    </item>
    
  </channel>
</rss>