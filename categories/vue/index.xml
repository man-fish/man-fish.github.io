<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on 于先森的个人博客</title>
    <link>https://patrick-prod.github.io/categories/vue/</link>
    <description>Recent content in vue on 于先森的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 01 Feb 2020 18:38:35 +0800</lastBuildDate>
    
	<atom:link href="https://patrick-prod.github.io/categories/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue基础 Vm生命周期</title>
      <link>https://patrick-prod.github.io/post/vue%E5%9F%BA%E7%A1%80-vm%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Sat, 01 Feb 2020 18:38:35 +0800</pubDate>
      
      <guid>https://patrick-prod.github.io/post/vue%E5%9F%BA%E7%A1%80-vm%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>起步 每个Vue实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。 比如 created 钩子可以用来在一个实例被创建之后执行代码：</description>
    </item>
    
    <item>
      <title>Vue基础 Vm实例</title>
      <link>https://patrick-prod.github.io/post/vue%E5%9F%BA%E7%A1%80-vm%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sat, 01 Feb 2020 18:37:02 +0800</pubDate>
      
      <guid>https://patrick-prod.github.io/post/vue%E5%9F%BA%E7%A1%80-vm%E5%AE%9E%E4%BE%8B/</guid>
      <description>每个 Vue 应用都是通过用 Vue函数创建一个新的 Vue 实例开始的。了解vue实例之前一定要知道MVVM模型， 1 2 3 var vm = new Vue({ // 选项 }) 虽然没有完全遵循 MVVM 模型，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 vm(ViewModel 的缩写) 这个变量名表示 Vue 实例。 MVVM模型 MVVM（Model–view–vie</description>
    </item>
    
  </channel>
</rss>